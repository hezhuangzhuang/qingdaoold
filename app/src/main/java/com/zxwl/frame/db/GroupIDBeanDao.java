package com.zxwl.frame.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zxwl.frame.bean.GroupIDBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GROUP_IDBEAN".
*/
public class GroupIDBeanDao extends AbstractDao<GroupIDBean, Void> {

    public static final String TABLENAME = "GROUP_IDBEAN";

    /**
     * Properties of entity GroupIDBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Groupid = new Property(0, String.class, "groupid", false, "GROUPID");
        public final static Property IsGrou = new Property(1, boolean.class, "isGrou", false, "IS_GROU");
    }


    public GroupIDBeanDao(DaoConfig config) {
        super(config);
    }
    
    public GroupIDBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUP_IDBEAN\" (" + //
                "\"GROUPID\" TEXT UNIQUE ," + // 0: groupid
                "\"IS_GROU\" INTEGER NOT NULL );"); // 1: isGrou
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUP_IDBEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GroupIDBean entity) {
        stmt.clearBindings();
 
        String groupid = entity.getGroupid();
        if (groupid != null) {
            stmt.bindString(1, groupid);
        }
        stmt.bindLong(2, entity.getIsGrou() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GroupIDBean entity) {
        stmt.clearBindings();
 
        String groupid = entity.getGroupid();
        if (groupid != null) {
            stmt.bindString(1, groupid);
        }
        stmt.bindLong(2, entity.getIsGrou() ? 1L: 0L);
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public GroupIDBean readEntity(Cursor cursor, int offset) {
        GroupIDBean entity = new GroupIDBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // groupid
            cursor.getShort(offset + 1) != 0 // isGrou
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GroupIDBean entity, int offset) {
        entity.setGroupid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setIsGrou(cursor.getShort(offset + 1) != 0);
     }
    
    @Override
    protected final Void updateKeyAfterInsert(GroupIDBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(GroupIDBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(GroupIDBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
